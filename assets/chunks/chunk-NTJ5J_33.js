import{r as s,b as n,P as a,o as p,c as e,l as i}from"./chunk-C3KEJ4OI.js";import"./chunk-B3cmQ3xr.js";const r={setup(){const u=s("c");return n(u),Promise.resolve({s:"string"}),{}}},o=i("<h4>for object</h4><li><span>NormalObject: </span><span>普通对象类型</span></li><li><span>Merge: </span><span>合并两个对象类型</span></li><li><span>Keyof: </span><span>获取键值</span></li><h4>for Array</h4><li><span>MaybeArray: </span><span>可能是个 Array</span></li><h4>for function</h4><li><span>ReturnVoid: </span><span>异步或普通函数返回空</span></li><li><span>AnyFunc: </span><span>任意函数</span></li><li><span>Func: </span><span>根据传入泛型参数 决定 Function 类型</span></li><li><span>FirstParameter: </span><span>函数第一个参数</span></li><li><span>RestParameters: </span><span>函数除了第一个，剩余参数</span></li><h4>for vue</h4><li><span>MaybeRef: </span><span>可能是个 Ref </span></li><li><span>VueComponentPropsType: </span><span>返回 vue 组件的 props 类型</span></li><h4>for data</h4><li><span>Media: </span><span>包含 label value 的对象类型</span></li><li><span>TreeNode: </span><span>TreeNode 结构</span></li><h4>for promise</h4><li><span>Unpromisify: </span><span>获取 promise 里的类型。</span><span>你也可以使用TS内置的 Awaited</span></li><li><span>ApiReturnType:</span><span>获取 async function 中的 retrun 的 promise 中的数据类型</span></li><li><span>MaybePromise: </span><span>T  | Promise&lt;T&gt;</span></li><h4>for falsy</h4><li><span>NonVoidable:</span><span>排除类型中的void|undefined</span></li>",24),l=[o];function t(u,B,F,E,c,f){return p(),e("ul",null,l)}const d=a(r,[["render",t]]);export{d as default};
